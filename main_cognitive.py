# -*- coding: utf-8 -*-
"""main-cognitive.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RAWW4kEVC9tUeUgwdCJAYCs4JWC_vg0y
"""

# main.py â€” D-CVAE Fusion Model for Cognitive Decline Stage Prediction
# Author: [Your Name]
# GitHub: [Your GitHub link]
# License: MIT
# Date: 2024

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import DataLoader, TensorDataset, random_split
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.model_selection import StratifiedKFold

# ================================
# 1. Data Preprocessing
# ================================
def load_data(path="data/oasis_cleaned.csv"):
    df = pd.read_csv(path)
    X = df.drop(columns=["label"]).values
    y = df["label"].values
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    return X_scaled, y

# ================================
# 2. D-CVAE Fusion Architecture
# ================================
class Encoder(nn.Module):
    def __init__(self, input_dim, latent_dim, label_dim):
        super(Encoder, self).__init__()
        self.fc1 = nn.Linear(input_dim + label_dim, 128)
        self.fc_mu = nn.Linear(128, latent_dim)
        self.fc_logvar = nn.Linear(128, latent_dim)

    def forward(self, x, y):
        x = torch.cat([x, y], dim=1)
        h = F.relu(self.fc1(x))
        mu = self.fc_mu(h)
        logvar = self.fc_logvar(h)
        return mu, logvar

class Decoder(nn.Module):
    def __init__(self, latent_dim, label_dim, output_dim):
        super(Decoder, self).__init__()
        self.fc1 = nn.Linear(latent_dim + label_dim, 128)
        self.fc_out = nn.Linear(128, output_dim)

    def forward(self, z, y):
        x = torch.cat([z, y], dim=1)
        h = F.relu(self.fc1(x))
        return self.fc_out(h)

class Classifier(nn.Module):
    def __init__(self, latent_dim, output_classes):
        super(Classifier, self).__init__()
        self.fc1 = nn.Linear(latent_dim, 64)
        self.dropout = nn.Dropout(0.3)
        self.fc_out = nn.Linear(64, output_classes)

    def forward(self, z):
        x = F.relu(self.fc1(z))
        x = self.dropout(x)
        return self.fc_out(x)

class DCVAE(nn.Module):
    def __init__(self, input_dim, latent_dim, label_dim, output_classes):
        super(DCVAE, self).__init__()
        self.encoder = Encoder(input_dim, latent_dim, label_dim)
        self.decoder = Decoder(latent_dim, label_dim, input_dim)
        self.classifier = Classifier(latent_dim, output_classes)

    def reparameterize(self, mu, logvar):
        std = torch.exp(0.5 * logvar)
        eps = torch.randn_like(std)
        return mu + eps * std

    def forward(self, x, y_onehot):
        mu, logvar = self.encoder(x, y_onehot)
        z = self.reparameterize(mu, logvar)
        x_recon = self.decoder(z, y_onehot)
        y_pred = self.classifier(z)
        return x_recon, mu, logvar, y_pred

# ================================
# 3. Loss Function
# ================================
def loss_fn(x, x_recon, mu, logvar, y_true, y_pred):
    recon_loss = F.mse_loss(x_recon, x)
    kl_div = -0.5 * torch.sum(1 + logvar - mu.pow(2) - logvar.exp())
    cls_loss = F.cross_entropy(y_pred, y_true)
    return recon_loss + 0.001 * kl_div + cls_loss

# ================================
# 4. Training and Evaluation
# ================================
def train(model, optimizer, dataloader, epochs=30):
    model.train()
    for epoch in range(epochs):
        total_loss = 0
        for xb, yb in dataloader:
            y_onehot = F.one_hot(yb, num_classes=3).float()
            x_recon, mu, logvar, y_pred = model(xb, y_onehot)
            loss = loss_fn(xb, x_recon, mu, logvar, yb, y_pred)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
            total_loss += loss.item()
        print(f"Epoch {epoch+1}, Loss: {total_loss / len(dataloader):.4f}")

def evaluate(model, dataloader):
    model.eval()
    all_preds, all_labels = [], []
    with torch.no_grad():
        for xb, yb in dataloader:
            y_onehot = F.one_hot(yb, num_classes=3).float()
            _, _, _, y_pred = model(xb, y_onehot)
            preds = torch.argmax(y_pred, dim=1)
            all_preds.extend(preds.cpu().numpy())
            all_labels.extend(yb.cpu().numpy())

    acc = accuracy_score(all_labels, all_preds)
    prec = precision_score(all_labels, all_preds, average='macro')
    rec = recall_score(all_labels, all_preds, average='macro')
    f1 = f1_score(all_labels, all_preds, average='macro')
    return acc, prec, rec, f1

# ================================
# 5. Main Execution
# ================================
if __name__ == "__main__":
    X, y = load_data("data/oasis_cleaned.csv")
    X_tensor = torch.tensor(X, dtype=torch.float32)
    y_tensor = torch.tensor(y, dtype=torch.long)

    dataset = TensorDataset(X_tensor, y_tensor)
    skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

    fold = 1
    for train_idx, val_idx in skf.split(X, y):
        print(f"\n=== Fold {fold} ===")
        train_ds = TensorDataset(X_tensor[train_idx], y_tensor[train_idx])
        val_ds = TensorDataset(X_tensor[val_idx], y_tensor[val_idx])

        train_loader = DataLoader(train_ds, batch_size=32, shuffle=True)
        val_loader = DataLoader(val_ds, batch_size=32)

        model = DCVAE(input_dim=X.shape[1], latent_dim=6, label_dim=3, output_classes=3)
        optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

        train(model, optimizer, train_loader, epochs=30)
        acc, prec, rec, f1 = evaluate(model, val_loader)
        print(f"Accuracy: {acc:.2%}, Precision: {prec:.2%}, Recall: {rec:.2%}, F1 Score: {f1:.2%}")
        fold += 1